{"name":"Trajectory.js","body":"Trajectory.js\r\n=============\r\n\r\n### Demo\r\nA demonstration of the program is available on my [Dropbox account](http://dl.dropbox.com/u/42030209/rough/arrow/demo.html). A modern browser that implements the HTML5 `<canvas>` element is, obviously, required – I personally recommend [Google Chrome](https://www.google.com/chrome). \r\n\r\n### Explanation\r\nThis program is designed to compute the trajectories of projectiles and generate graphs inside your browser! I created it as a weekend project to help me cheat at archery. It actually functions as a practical tool and I've found that it matches both the real-world data and the results of my 40# English longbow on the range quite well. It is also suitable for modelling other sub-sonic projectiles, such as tennis balls and air rifle pellets, providing that you know its drag coefficient (e.g. 0.5 for a sphere).\r\n\r\n### Instructions\r\nTo use the program, simply enter the projectile's parameters and click 'Plot Trajectory'. To generate a copy of your graph that can be saved, click ‘Generate PNG’. After the image pops up, you can save it by right-clicking it and selecting ‘Save As…’ (the exact phrase varies with different web browsers).\r\n\r\nI’ve put the default values to those of a 3/8” steel ball-bearing, shot at an angle of 5 degrees with an initial velocity of 80 metres/second, as an example. The blue line represents the trajectory with air resistance; the red line the trajectory without air resistance, i.e. in a vacuum; and the purple line the projectile’s kinetic energy, expressed as a percentage of its initial (this might be useful for hunters).\r\n\r\nGraph Class\r\n-----------\r\nI actually wrote my own graph-drawing class for this project, mainly as a learning exercise to familiarise myself with the `<canvas>` element and its API. Unfortunately, I feel that the API still has a way to go. It lacks features that I would consider *basic*, such as the ability to measure the height of text (`measureText()` only reports the width) – which makes writing an adaptive layout engine slightly tricky!\r\n\r\n#### How it Works\r\nI may give a more detailed explanation, when I can find the time. But until then, the code in `/js/demo.js` should, hopefully, be clear enough to see how it works.\r\n\r\n##### Basic Usage\r\n###### Instantiate a new Graph Object\r\n```javascript\r\n// Don't forget to include:\r\n//     - math.js\r\n//     - graph.js\r\n//     - settings.js\r\n//     - plot.js\r\n\r\n// Overide the default settings, to customise the Graph.\r\nvar settings = {\r\n    xAxis1: {  // Bottom axis\r\n        min: 0,\r\n        max: 10,\r\n        title: \"n\",\r\n    },\r\n\r\n    yAxis1: {  // Left axis\r\n        min: 0,\r\n        max: 100,\r\n        title: \"n\\u00B2\",\r\n    },\r\n\r\n    // To hide an axis, set its value to null.\r\n    xAxis2: null,\r\n    yAxis2: null\r\n};\r\n\r\nvar width = 500;\r\nvar height = 300;\r\n\r\nvar g = new Graph(width, height, settings);\r\n\r\n// Draw the Graph, so that it is ready for plotting.\r\ng.draw();\r\n```\r\n\r\n###### Plot Data\r\n```javascript\r\n// Plotting an asymptotic curve as an example.\r\nvar data = [\r\n    [0, 0],\r\n    [1, 1],\r\n    [2, 4],\r\n    [3, 9],\r\n    [4, 16],\r\n    [5, 25],\r\n    [6, 36],\r\n    [7, 49],\r\n    [8, 64],\r\n    [9, 81],\r\n    [10, 100]\r\n];\r\n\r\n// Plot the curve, using a nice green colour.\r\ng.plotData(data, Graph.colours.green);\r\n\r\n// Finally, inset the Graph into the document, so that the user can see it.\r\ng.appendTo(document.body);\r\n```\r\n\r\n### Licence\r\nAll of the code (except for jQuery of course, which I've used in `demo.js`) is available under [GNU GPL v3.0](http://www.gnu.org/licenses/gpl-3.0.html) so feel free to use and modify it as you wish!\r\n    ","tagline":"A web application for computing and plotting (using the <canvas> element) the trajectories of subsonic projectiles, such as arrows and paintballs.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}